// eslint-disable-next-line no-undef,@typescript-eslint/no-var-requiresconst path = require("path");// eslint-disable-next-line no-undef,@typescript-eslint/no-var-requiresconst CopyPlugin = require("copy-webpack-plugin");// eslint-disable-next-line no-undef,@typescript-eslint/no-var-requiresconst HtmlPlugin = require("html-webpack-plugin");// eslint-disable-next-line no-undef,@typescript-eslint/no-var-requiresconst {CleanWebpackPlugin} = require("clean-webpack-plugin");// eslint-disable-next-line no-undefmodule.exports = {    entry: {        popup: path.resolve("src/popup/popup.tsx"),        options: path.resolve("src/options/options.tsx"),        background: path.resolve("src/background/background.ts"),        contentScript: path.resolve("src/contentScript/contentScript.ts")    },    module: {        rules:[            {                use:"ts-loader",                test:/\.tsx?$/,                exclude: /node_modules/            },            {                use: ["style-loader","css-loader"],                test:/\.css?$/i,            },            {                type:"asset/resources",                test: /\.(jpg|png|gif|jpeg|woff|woff2|eot|ttf|svg)$/            }        ]    },    resolve: {        extensions:[".tsx", ".ts",".js"]    },    output: {        filename:"[name].js",        path: path.resolve("dist")    },    plugins:[        new CleanWebpackPlugin({            cleanStaleWebpackAssets:false        }),        new CopyPlugin({            patterns:[                {                    from:path.resolve("src/static"),                    to: path.resolve("dist")                }            ]        }),        ...getHtmlPlugins([            "popup", "options"        ])    ],    optimization: {        splitChunks: {            chunks:"all"        }    }};function getHtmlPlugins(chunks) {    return chunks.map(chunk=> new HtmlPlugin({        title: "React Extension",        filename: `${chunk}.html`,        chunks:[chunk]    }));}